#!/usr/bin/python3
import serial
from cmd import Cmd
import sys
import bincopy
import math
import os
import signal
import time
from elftools.elf.elffile import ELFFile
import traceback
import glob

class rvmon(Cmd):

    __hiden_methods = ('do_EOF',)


    def _autocompleteLastArgAsFile(self, line, argNumberList = []):
        if line[-1] == ' ':
            return glob.glob("*")
        args = line.split()
        if (not len(args)-1 in argNumberList) and len(argNumberList) > 0:
            return []
        completions = []
        if len(args) > 1:
            arg = args[-1]
            if len(arg) > 0:
                pattern = arg + '*'
                for path in glob.glob(pattern):
                    if path.find(arg) != -1:
                        completions.append(path)
        return completions

    def get_names(self):
        return [n for n in dir(self.__class__) if n not in self.__hiden_methods]

    def __init__(self, devName, baud, redirectUart = False):
        Cmd.__init__(self)
        self.quit = False
        self.conn(devName, baud)
        self.setProcessorDebugModeStatus(True)
        print("Entering processor debug mode...")
        self.processing = False
        self.redirectUart = redirectUart
        if redirectUart :
            print("Redirection UART to rvmon.")

    def tryConnection(self):
        tryCount = 5
        for i in range(0, tryCount):
            self.ser.write(b"UUUU")
            time.sleep(2)
            res = self.protocolRead("fffffff0", 1)
            if len(res) > 0:
                return
            print("Connection Error. Trynig again.")
        print("Could not connect to UART.");

    def configDDR2(self):
        self.protocolWrite("fff00100", ["16208444", "00c8908c", "13410000", "00000100", "10430105"])

    def configUart(self):
        self.protocolWrite( "80000108", ["00000000"] )
        self.protocolWrite( "80000108", ["00000800"] )
        self.protocolWrite( "80000108", ["00000000"] )
        self.protocolWrite( "8000010c", ["99999999"] )
        self.protocolWrite( "80000108", ["80000003"] )

    def configUartDebugMode(self):
        self.configUart()
        self.protocolWrite("80000108", ["80000843"])

    def readUartDebug(self):
        return self.protocolRead("8080000110", 1)

    def conn(self, devName, baud):
        print("Try to connect to "+ devName +" @ {} baudrate".format(baud))
        self.ser = serial.Serial(devName, baudrate=baud , timeout = 0.1)
        self.tryConnection()
        self.configDDR2()
        print("Connected.")

    def do_conn(self, args):
        """
            Make a new connection to a UART interface.
            Usage:
                RVMON> conn device baudrate
                - device: e.g. "/dev/ttyUSB1"
                - baudrate: Any of the default baudrate, e.g. 115200, 38400, etc.
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        self.conn(args[0], args[1])

    def do_fix(self, args):
        """Tries to fix the current UART connection.
            Usage:
            RVMON> fix
        """
        print("Trying to fix connection.")
        self.tryConnection()

    def do_EOF(self, args):
        print("EOF received.")
        self.do_q(args)

    def str2barray(self, s, base):
        bitsPerChar = math.log(base,2)
        bytesPerChar = bitsPerChar / 8
        totalBytes = math.ceil(bytesPerChar * len(s))
        return int(s,base).to_bytes(totalBytes, byteorder="big")

    def do_sw(self,args):
        """
            Serial write. Low level protocol communication with ReonV.
            Write values sequentially to specified memory address.
            Usage:
                RVMON> sw hexAddress wordDataList
                - hexAddress: Memory address in hexadecimal to begin reading.
                - wordDataList: A list of words to be written sequentially
                  begining in adress 'hexAddress'
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        addr = int(args[0],16)
        data = args[1:]
        if len(data) == 0:
            print("Invalid amount of data.")
            return
        amount = len(data)
        if amount > (2**6) or amount < 1:
            print("Amount need to fit between 1 and 64.")
            return
        mes = "11"+"{:06b}".format(amount-1)+"{:032b}".format(addr)
        print("<  {:010x}".format(int(mes,2)))
        mes = self.str2barray(mes,2)
        self.ser.write(mes)
        for d in data:
            d = int(d,16)
            bd = "{:032b}".format(d)
            print("<  {:08x}".format(d))
            barray = self.str2barray(bd,2)
            self.ser.write(barray)

    def complete_replay(self, text, line, begidx, endidx):
        return self._autocompleteLastArgAsFile(line, [1])

    def replayserialfile(self, fileName):
        r = open(fileName, "rb").read()
        self.ser.write(r)

    def do_replay(self,args):
        """
            Low level communication. Send directly to UART the given binary file as arguments.
            Normally used to replay some sniffed traffic between ReonV and the monitor.
            Usage:
                RVMON>replay fileName
                - fileName: Binary file containing a byte stream.
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        self.replayserialfile(args[0])

    def runHexFile():
        pass

    def configSpecialRegs(self):
        self.protocolWrite("90400024", ["00000002"])
        self.protocolWrite("90400000", ["00000000", "000000e0", "00000002", "40001000", "40001000", "40001004", "10000000"])
        self.protocolWrite("90000000", ["000002ef"])
        self.protocolWrite("fff00100", ["16208444"])
        self.protocolWrite("fff00104", ["00c8908c"])
        self.protocolWrite("fff00108", ["13410000"])


    def do_run(self, args):
        """
            Make the processor run beginning at a specified address.
            Usage:
                RVMON> run addrHex
                - addrHex: addres to begin running in hexadecimal.
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        addr = int(args[0], 16)
        pc = "{:08x}".format(addr)
        npc = "{:08x}".format(addr+4)
        #set pc and npc
        self.protocolWrite("90400010", [pc, npc])
        #zero registers
        self.protocolWrite("90300204", ["00000000"]*7)
        #configure special registers
        self.configSpecialRegs()
        baseRegAddr = 0x90300000
        for i in range(0, 16):
            iterAddr = baseRegAddr + (i * 0x20)
            iterAddr = "{:08x}".format(iterAddr)
            self.protocolWrite(iterAddr, ["00000000"]*8)
        self.protocolRead("80000000", 1)
        #config uart
        if self.redirectUart:
            self.configUartDebugMode()
        else:
            self.configUart()
        self.setProcessorDebugModeStatus(False) # begin execution
        #execution loop
        self.processing = True
        while self.processing:
            #check if processor entered debug mode
            if self.isProcessorInDebugMode():
                self.processing = False
            if self.redirectUart: #get uart output
                res = self.protocolRead("80000104",1)
                res = self.protocolRead("80000110",1)
                if len(res) > 0:
                    if int(res[0],16) != 0:
                        print(chr(int(res[0],16)), end="", flush=True)
        print("")
        self.setProcessorDebugModeStatus(True)

    def isProcessorInDebugMode(self, pid = 0):
        res = self.protocolRead("90000020", 1)
        dsuBreakStepReg = int(res[0], 16)
        mask = 1 << pid
        dsuBreakStepReg = dsuBreakStepReg & mask
        dsuBreakStepReg = dsuBreakStepReg >> pid
        if dsuBreakStepReg == 1:
            print("Interrupted!")
            res = self.protocolRead("90400020", 1)
            interuptionCode = int(res[0], 16) & 0x000007F8
            errormode = int(res[0], 16) & 0x00000800
            print("\nInterruption code: 0x{:02x}. ErrorMode: {}".format(interuptionCode, errormode))
            pc = self.protocolRead("90400010",1)[0]
            instructionpc = self.protocolRead(pc,1)[0]
            print("PC(0x{}) => 0x{}".format(pc, instructionpc))
            return True
        else:
            return False


    def setProcessorDebugModeStatus(self, newStatus, pid = 0):
        if newStatus == True:
            self.protocolWrite("90000020", ["0000ffff"])
        else:
            self.protocolWrite("90000020", ["00000000"])

    def complete_srecl(self, text, line, begidx, endidx):
        return self._autocompleteLastArgAsFile(line, [1])

    def do_srecl(self, args):
        """
            Load file in SREC format to specified address.
            Usage:
                RVMON> srecl srecFileName addresToLoadInHex
                - srecFileName: SREC file name.
                - addresToLadInHex: Adress to load the specified file.
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        fileName = args[0]
        addr = int(args[1],16)
        f = bincopy.BinFile()
        f.add_srec_file(fileName)
        d = f.as_binary()
        wordLen = 4 #4 bytes
        maxWordPerCommand = 64
        maxBytesPerCommand = maxWordPerCommand * wordLen
        datalen = len(d)
        datalenword = len(d)//wordLen
        datatimes = math.ceil( datalenword/maxWordPerCommand)
        lastAmount = 0
        for i in range(0, datatimes):
            sendData = d[i*lastAmount * wordLen : maxWordPerCommand*wordLen+(i*lastAmount * wordLen )]
            totalInWords = len(sendData) // wordLen
            totalInBytes = len(sendData)
            lastAmount = totalInWords
            mes = "11"+"{:06b}".format(totalInWords-1)+"{:032b}".format(addr)
            mes = self.str2barray(mes,2)
            self.ser.write(mes)
            self.ser.write(sendData)
            addr += totalInBytes

    def complete_load(self, text, line, begidx, endidx):
        return self._autocompleteLastArgAsFile(line, [1])

    def do_load(self, args):
        """
            Load ELF file into memory.
            Usage:
                RVMON> load elfFileName
                - elfFileName: ELF file name to be loaded
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        fileName = args[0]
        elf = ELFFile(open(fileName,"rb"))
        segments = [x for x in elf.iter_segments()]
        wordLen = 4 #4 bytes
        maxWordPerCommand = 64
        maxBytesPerCommand = maxWordPerCommand * wordLen
        for seg in segments:
            data = seg.data()
            addr = seg.header.p_vaddr
            datalen = seg.header.p_filesz
            datalenword = len(data)//wordLen
            datatimes = math.ceil( datalenword/maxWordPerCommand)
            lastAmount = 0
            for i in range(0, datatimes):
                sendData = data[i*lastAmount * wordLen : maxWordPerCommand*wordLen+(i*lastAmount * wordLen )]
                totalInWords = len(sendData) // wordLen
                totalInBytes = len(sendData)
                lastAmount = totalInWords
                mes = "11"+"{:06b}".format(totalInWords-1)+"{:032b}".format(addr)
                mes = self.str2barray(mes,2)
                self.ser.write(mes)
                self.ser.write(sendData)
                addr += totalInBytes


    def do_sr(self,args):
        """
            Serial read. Low level protocol communication with ReonV.
            Print on the screen memory read.
            Usage:
                RVMON> sr hexAddress amount
                - hexAddress: Memory address in hexadecimal to begin reading.
                - amount: Amounts of words to be read.
            Example:
                rvmon> sr 40400010 3
                    0x40400010 =>  0x40001080
                    0x40400014 =>  0x40fe1084
                    0x40400018 =>  0x000234AA

        """
        if self.ser == None:
            print("Serial not connected.")
            return
        args = args.split()
        addr = int(args[0],16)
        if addr > 0xffffffff:
            print("Invalid 32bit adress {:x}".format(addr))
            return
        amount = int(args[1])
        if amount > (2**6) or amount < 1:
            print("Amount need to fit between 1 and 64.")
            return
        mes = "10"+"{:06b}".format(amount-1)+"{:032b}".format(addr)
        mes = self.str2barray(mes,2)
        self.ser.write(mes)
        res = self.ser.read(4)
        t = 0
        while(len(res) > 0):
            res = int.from_bytes(res, byteorder='big', signed=False)
            print("\t0x{:08x} =>  0x{:08x}".format(addr+t,res))
            t+=4
            res = self.ser.read(4)

    def complete_i(self, text, line, begidx, endidx):
        return self._autocompleteLastArgAsFile(line, [1])

    def do_i(self, args, echo=True):
        """
            Low level communication. Interpret serial commands file, output
            to UART bare protocol commands.
            Usage:
                RVMON> i serialCommandsFileName
                - serialCommandsFileName: A file in serial commands format.
            Serial protocol:
                The UART communication protocol contains a read and a write
                command. Both follow a static structure:
                    Read X words (40 bits):
                        [10][6 bits: X-1][32 bits: Address]
                        e.g. 0x8312345678
                            Read 4 words sequentially, begining in adress 0x12345678
                        X has to be between 1 < X < 64

                    Write X words(40 bits):
                        [11][6 bits: X-1][32 bits: Address]
                        Followed by 'amount' times of words to be written
                        sequentially begining in the address specified.
                        e.g. 0xc112345678 aabbaabb ccddccdd
                            Write 2 words sequentially begining in adress 0x12345678
                        X has to be between 1 < X < 64


            File format:
                In order for the file to be interpretable it must follow the
                following rules:
                - Each line must contain only one command or argument.
                - A command is a protocol element - either a write or read
                  command - following the protocol explained above.
                - Commands are 10 characters long and represent a 40 bit number
                  in hexadecimal.
                - Tabs and spaces are ignored.
                - Arguments are 8 characters long and represent a 40 bit number
                  in hexadecimal.
                - After a write command with X amount of data to write, the
                  next X lines are data arguments.
                - Empty lines are ignored.
                - Everything in a line after and ingluding a '-' is consider
                  comment.
                This file will be executed from top to bottom, and the read
                commands will be output to the terminal.
                Example:
                    -- Write 0xdac to adress 0xff00ff00
                    c0ff00ff00
                        00000dac -- this is another comment

                    -- Some  more commands
                    c290000024 -- write 3 words begin in adress 90000024
                        fffe0001 -- write this to addr 0x90000024
                        fffe0002 -- write this to addr 0x90000028
                        fffe0003 -- write this to addr 0x9000002c
                    8090000040 -- read something here
        """
        args = self.testCmdArgsLen(args, "conn", 2)
        if args == False: return
        lines = open(args[0], "r").read().split("\n")
        lines = [l.partition("-")[0] for l in lines]
        data = "".join(lines)
        data = data.replace(" ","")
        data = data.replace("\t","")
        data = data.replace("\n","")
        serData = self.str2barray(data, 16);
        if echo:
            print("<  0x" + data)
        self.ser.write(serData)
        res = self.ser.read(4)
        while(len(res) > 0):
            res = int.from_bytes(res, byteorder='big', signed=False)
            if echo:
                print(">  0x{:08x}".format(res))
            res = self.ser.read(4)

    def protocolWrite(self, addrHex, dataHexList):
        dataHexList = dataHexList[0:64]
        addr = int(addrHex, 16)
        mes = "11"+"{:06b}".format(len(dataHexList)-1)+"{:032b}".format(addr)
        data = self.str2barray(mes,2)
        for dhex in dataHexList:
            data += self.str2barray(dhex,16)
        self.ser.write(data)

    def protocolRead(self, addrHex, count):
        if count < 1:
            return []
        if count > 64:
            count = 64
        addr = int(addrHex, 16)
        mes = "10"+"{:06b}".format(count-1)+"{:032b}".format(addr)
        self.ser.write(self.str2barray(mes,2))
        data = []
        for i in range(0,count):
            res = self.ser.read(4)
            res = int.from_bytes(res, byteorder='big', signed=False)
            data.append("{:08x}".format(res))
        return data

    def send(self, hexStr):
        self.ser.write(self.str2barray(hexStr,16))

    def recv(self, numBytes):
        res = self.ser.read(4)
        self.processing = True
        while(len(res) < numBytes) and self.processing :
            res += self.ser.read(4)
        return res

    def handle_run_trap(self):
        self.processing = False
        self.send("8090000020") # get trap base register to get trap type
        tt = self.ser.read(4)[3]
        self.send("8090400010") # get pc
        pc = self.ser.read(4)
        pc = int.from_bytes(pc, byteorder='big', signed=False)
        print(
"""Trap occured!
PC = {:08x}
Trap type = {:x}""".format(pc,tt))

    def testCmdArgsLen(self, args, comname, numArgs):
        args = args.split()
        if len(args) != numArgs:
            self.do_help(comname)
            return False
        return args

    def do_q(self,args):
        """
            Quits the monitor.
            Usage:
            RVMON> q
        """
        print("Quiting...");
        self.quit = True
        quit()

if __name__ == '__main__':
    if "-h" in sys.argv:
        print(""" Usage:
    rvmon device baudrate [-u]

    - device: device file name, e.g. /dev/ttyUSB1
    - baudrate: The parameter baudrate can be one of the standard values: 50, 75,
      110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200, 38400,
      57600, 115200. These are well supported on all platforms

 Optional 
     -u: If set, the UART will be set in debug mode and will be redirected to RVMON. """)
        exit()
    if len(sys.argv) < 3:
        print("Usage: rvmon device baudrate")
        quit()
    print("Starting rvmon...")
    dev = sys.argv[1]
    baud = sys.argv[2]
    redirectUart = True if "-u" in sys.argv else False
    prompt = rvmon(dev, baud, redirectUart)
    prompt.prompt = 'rvmon> '

    def signal_handler(sig, frame):
        if not prompt.processing:
            print("")
            prompt.do_q("")
        else:
            prompt.processing = False
    signal.signal(signal.SIGINT, signal_handler)
    while(True):
        try:
            prompt.cmdloop('')
        except:
            if prompt.quit:
                quit()
            traceback.print_exc()
